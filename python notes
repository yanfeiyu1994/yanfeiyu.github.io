1. 将python列表中的整型元素转成字符串元素并拼接成一个字符串

ls1 = [1,2,3,4,5,6]
ls1 = list(map(str,ls1))
['1','2','3','4','5','6']
''.join(ls1)
'123456'

或者使用reduce函数

from functools import reduce

ls1 = list(map(str,ls1))
reduce(lambda x,y: x+y, ls1)

2. 若Python列表中的元素既含有数值型元素又含有字符型元素，将其统一转换成字符型元素的方法是：
# 暂时只想到这种方法，更pythonic的方法还没想到，想到之后再更新吧

def convertInttoStr(alist):
    newlist = []
    for i in alist:
        if not isinstance(i,str):
            newlist.append(str(i))
        else:
            newlist.append(i)
        
    return newlist

3. 使用del关键字 删除长列表中的指定元素。比如26个英文字母组成的列表的'q'字母
首先创建一个由26个英文字母组成的列表

letterlist = [chr(i) for i in range(97,123)
del letterlist[letterlist.index('q')]

4.enumerate的用法

alist = list('abcde')
for i,j in enumerate(alist):
    print('alist[%d] = %s' % (i,j))

alist[0] = a
alist[1] = b
alist[2] = c
alist[3] = d
alist[4] = e

5. 在class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样就隐藏了内部的复杂逻辑但是，外部代码也可以做到
自由地修改一个实例的属性

如果要让内部属性不被外部访问，可以把属性的名称前加上 [两个] 下划线__,在python中，实例的变量名如果以__开头，就变成了一个私有变量(private)，
只有内部可以访问，而外部不可以访问。例如：

class Student():
    
    def __init__(self, name, score):
        self.__name = name
	self.__score = score
	
    def print_score(self):
        print('%s: %s' % (self.__name, self.__score))

改完后，外部代码就已经无法从外部访问实例变量.__name和__.score了：

>>> bart = Student('Bart Simpson', 59)
>>> bart.__name
Traceback(most recent call last):
     File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute '__name'

这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。
但是如果外部代码想要获取name和score怎么办？可以给Student类增加get_name,get_score这样的方法

class Student():
    ...
    
    def get_name(self):
        return self.__name

    def get_score(self):
        return self.__score

如果又要允许外部代码修改score怎么办？可以再给Student类增加set_score方法：

class Student(object):
    ...

    def set_score(self, score):
        self.__score = score

你也许会问，原先那种直接通过bart.score = 99也可以修改啊，为什么要定义一个方法大费周折？因为在方法中，
可以对参数做检查，避免传入无效的参数：

class Student():
    ...

    def set_score(self, score):
        if 0 <= score <= 100:
            self.__score = score
        else:
            raise ValueError('bad score')
    
需要注意的是，在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，
特殊变量是可以直接访问的，不是private变量，所以，不能用__name__、__score__这样的变量名。

有些时候，你会看到以一个 [下划线] 开头的实例变量名，比如 _name，这样的实例变量外部是可以访问的，但是，按照
约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。

双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问__name是因为Python解释器对外
把__name变量改成了_Student__name，所以，仍然可以通过_Student__name来访问__name变量：
（但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把__name改成不同的变量名）

>>> bart = Student('Bart Simpson', 59)
>>> bart.__name
Traceback(most recent call last):
     File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute '__name'
>>> bart._Student__name
'Bart Simphson'

总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。

最后注意下面的这种错误写法：

>>> bart = Student('Bart Simpson', 59)
>>> bart.get_name()
'Bart Simpson'
>>> bart.__name = 'New Name' # 设置__name变量！
>>> bart.__name
'New Name'

表面上看，外部代码“成功”地设置了__name变量，但实际上这个__name变量和class内部的__name变量不是一个变量！
内部的__name变量已经被Python解释器自动改成了_Student__name，而外部代码给bart 【新增】 了一个__name变量。不信试试：

>>> bart.get_name()   # get_name()内部返回self.__name
'Bart Simpson'
>>> bart._Student__name
'Bart Simphson'

6. DataFrame选择col的技巧
在Titanic比赛的训练数据中，在一番预处理后，将male对应0，female对应1。此时对该train_df训练数据集进行遍历，可以这样来选择对应不同性别、
不同Pclass的年龄

for i in range(0,2):
    for j in range(0,3):
        train_df[(train_df['Sex'] == i & (train_df['Pclass'] == j+1)]['Age'].dropna()
	
	
7. train_df.loc[train_df['Age'] == 80]  可查找年龄为80岁的乘客的信息  
   train_df.loc[(train_df['Age'] == 80) | (train_df['Age'] == 75)]  并集 取出年龄为80和年龄为75的数据
   train_df.loc[train_df['Age'] == 80, 'Name'] 取出train_df 中年龄为80的乘客的数据

8. 指定条件，以此来删掉DataFrame中特定的行。
比如：删掉traindata数据中h_in为1.2，同时h_out为0.2的行  (注意这个同时，此时不会删除h_in=1.2,h_out=0.6的行）

traindata[(True^(traindata['h_in'].isin([1.2]) & traindata['h_out'].isin([0.2])))]

若代码写成：

traindata[(True^(traindata['h_in'].isin([1.2])) & (True^traindata['h_out'].isin([0.2]))]

此时就会把h_in=1.2（不管h_out是多少）,以及h_out=0.2（不管h_in是多少）的行数据全删掉


9. train_df.Age.dropna().mode()[0]   取出年龄的众数（如果有多个众数，则取出第一个）

10. 查找某行是否存在缺失值 (打印出存在缺失值的行）

for i in train_df.columns:
    if train_df[i].isnull().any():
        print(i)


